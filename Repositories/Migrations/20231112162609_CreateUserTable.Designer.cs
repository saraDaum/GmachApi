// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Models;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(GmachimSaraAndShaniContext))]
    [Migration("20231112162609_CreateUserTable")]
    partial class CreateUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcountsForLoan", b =>
                {
                    b.Property<int>("LoanId")
                        .HasColumnType("int")
                        .HasColumnName("LoanID");

                    b.Property<int>("AcountsNumber")
                        .HasColumnType("int");

                    b.HasKey("LoanId", "AcountsNumber");

                    b.HasIndex(new[] { "AcountsNumber" }, "IX_AcountsForLoans_AcountsNumber");

                    b.ToTable("AcountsForLoans", (string)null);
                });

            modelBuilder.Entity("LoansGuarantor", b =>
                {
                    b.Property<int>("LoanId")
                        .HasColumnType("int")
                        .HasColumnName("LoanID");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int")
                        .HasColumnName("BorrowerID");

                    b.HasKey("LoanId", "BorrowerId")
                        .HasName("PK_LoansConectoin");

                    b.HasIndex(new[] { "BorrowerId" }, "IX_LoansGuarantors _BorrowerID");

                    b.ToTable("LoansGuarantors ", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Acount", b =>
                {
                    b.Property<int>("AccontId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccontId"));

                    b.Property<int>("AcountsNumber")
                        .HasColumnType("int");

                    b.Property<int>("BankNumber")
                        .HasColumnType("int");

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int")
                        .HasColumnName("BorrowerID");

                    b.Property<int>("Branch")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmAcountFile")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("LoanDetailsLoanId")
                        .HasColumnType("int");

                    b.HasKey("AccontId")
                        .HasName("PK_Acounts_1");

                    b.HasIndex("LoanDetailsLoanId");

                    b.HasIndex(new[] { "BorrowerId", "AcountsNumber", "BankNumber" }, "IX_Acounts")
                        .IsUnique();

                    b.ToTable("Acount", (string)null);
                });

            modelBuilder.Entity("Repositories.Models.Borrower", b =>
                {
                    b.Property<int>("UserNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNumber"));

                    b.Property<string>("CopyId")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CopyID");

                    b.Property<int?>("LoanDetailsLoanId")
                        .HasColumnType("int");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPhone")
                        .HasColumnType("int");

                    b.HasKey("UserNumber");

                    b.HasIndex("LoanDetailsLoanId");

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("Repositories.Models.Deposit", b =>
                {
                    b.Property<int>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepositID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepositId"));

                    b.Property<DateTime>("DateToPull")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepositorsId")
                        .HasColumnType("int")
                        .HasColumnName("DepositorsID");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.HasKey("DepositId");

                    b.HasIndex(new[] { "DepositorsId" }, "IX_Deposits_DepositorsID");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Repositories.Models.Depositor", b =>
                {
                    b.Property<int>("UserNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNumber"));

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("userEmail")
                        .IsFixedLength();

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPhone")
                        .HasColumnType("int");

                    b.HasKey("UserNumber");

                    b.ToTable("Depositors");
                });

            modelBuilder.Entity("Repositories.Models.Guarantor", b =>
                {
                    b.Property<int>("UserNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNumber"));

                    b.Property<int>("GuarantorId")
                        .HasColumnType("int")
                        .HasColumnName("guarantorID");

                    b.Property<string>("GuarantorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("guarantorName");

                    b.Property<int?>("LoanDetailsLoanId")
                        .HasColumnType("int");

                    b.Property<int>("LoanId")
                        .HasColumnType("int")
                        .HasColumnName("LoanID");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nchar(40)")
                        .IsFixedLength();

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPhone")
                        .HasColumnType("int");

                    b.HasKey("UserNumber");

                    b.HasIndex("LoanDetailsLoanId");

                    b.HasIndex(new[] { "LoanId" }, "IX_Guarantors_LoanID");

                    b.ToTable("Guarantors");
                });

            modelBuilder.Entity("Repositories.Models.LoanDetails", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("BorrowerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateToGetBack")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoanFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.ToTable("LoanDetails");
                });

            modelBuilder.Entity("Repositories.Models.LoansDetail", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoanID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("BorrowerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateToGetBack")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoanFile")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Sum")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.ToTable("LoansDetails");
                });

            modelBuilder.Entity("Repositories.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserIdentityNumber")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPhone")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AcountsForLoan", b =>
                {
                    b.HasOne("Repositories.Models.Acount", null)
                        .WithMany()
                        .HasForeignKey("AcountsNumber")
                        .IsRequired()
                        .HasConstraintName("FK_AcountsForLoans_Acounts");

                    b.HasOne("Repositories.Models.LoansDetail", null)
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .IsRequired()
                        .HasConstraintName("FK_AcountsForLoans_LoansDetails");
                });

            modelBuilder.Entity("LoansGuarantor", b =>
                {
                    b.HasOne("Repositories.Models.Borrower", null)
                        .WithMany()
                        .HasForeignKey("BorrowerId")
                        .IsRequired()
                        .HasConstraintName("FK_LoansGuarantors _Borrowers");

                    b.HasOne("Repositories.Models.LoansDetail", null)
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .IsRequired()
                        .HasConstraintName("FK_LoansGuarantors _LoansDetails");
                });

            modelBuilder.Entity("Repositories.Models.Acount", b =>
                {
                    b.HasOne("Repositories.Models.Borrower", "Borrower")
                        .WithMany("Acounts")
                        .HasForeignKey("BorrowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Acounts_Borrowers");

                    b.HasOne("Repositories.Models.LoanDetails", null)
                        .WithMany("AcountsNumbers")
                        .HasForeignKey("LoanDetailsLoanId");

                    b.Navigation("Borrower");
                });

            modelBuilder.Entity("Repositories.Models.Borrower", b =>
                {
                    b.HasOne("Repositories.Models.LoanDetails", null)
                        .WithMany("Borrowers")
                        .HasForeignKey("LoanDetailsLoanId");
                });

            modelBuilder.Entity("Repositories.Models.Deposit", b =>
                {
                    b.HasOne("Repositories.Models.Depositor", "Depositors")
                        .WithMany("Deposits")
                        .HasForeignKey("DepositorsId")
                        .IsRequired()
                        .HasConstraintName("FK_Deposits_Depositors");

                    b.Navigation("Depositors");
                });

            modelBuilder.Entity("Repositories.Models.Guarantor", b =>
                {
                    b.HasOne("Repositories.Models.LoanDetails", null)
                        .WithMany("Guarantors")
                        .HasForeignKey("LoanDetailsLoanId");

                    b.HasOne("Repositories.Models.LoansDetail", "Loan")
                        .WithMany("Guarantors")
                        .HasForeignKey("LoanId")
                        .IsRequired()
                        .HasConstraintName("FK_Guarantors_LoansDetails");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Repositories.Models.Borrower", b =>
                {
                    b.Navigation("Acounts");
                });

            modelBuilder.Entity("Repositories.Models.Depositor", b =>
                {
                    b.Navigation("Deposits");
                });

            modelBuilder.Entity("Repositories.Models.LoanDetails", b =>
                {
                    b.Navigation("AcountsNumbers");

                    b.Navigation("Borrowers");

                    b.Navigation("Guarantors");
                });

            modelBuilder.Entity("Repositories.Models.LoansDetail", b =>
                {
                    b.Navigation("Guarantors");
                });
#pragma warning restore 612, 618
        }
    }
}
